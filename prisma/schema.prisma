// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int       @id @default(autoincrement())
  username            String    @unique
  email               String    @unique
  password            String
  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt

  profile             Profile?       
  stories             Stories[]   
  likes               Likes[]     
  bookmarks           Bookmark[]  
}

model Profile {
  id                  Int       @id @default(autoincrement())
  userId              Int       @unique
  name                String
  bio                 String
  avatar_url          String?
  gender              String
  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt
  
  user                User      @relation(fields: [userId], references: [id])
}

model Stories {
  id                  Int       @id @default(autoincrement())
  user_id             Int
  title               String
  slug                String    @unique
  content             String
  short_description   String
  img_url             String
  category_id         Int
  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt

  user                User      @relation(fields: [user_id], references: [id])
  likes               Likes[]  
  bookmarks           Bookmark[]
  category            Category  @relation(fields: [category_id], references: [id])
}

model Category {
  id                  Int       @id @default(autoincrement())
  name                String    @unique
  slug                String    @unique
  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt

  stories Stories[]
}

model Likes {
  id                  Int       @id @default(autoincrement())
  story_id            Int
  user_id             Int
  created_at          DateTime  @default(now())

  user                User      @relation(fields: [user_id], references: [id])
  story               Stories   @relation(fields: [story_id], references: [id])

  @@unique([user_id, story_id], name: "user_story_unique")
}

model Bookmark {
  id                  Int       @id @default(autoincrement())
  story_id            Int
  user_id             Int
  notes               String?
  created_at          DateTime  @default(now())

  user                User      @relation(fields: [user_id], references: [id])
  story               Stories   @relation(fields: [story_id], references: [id])

  @@unique([user_id, story_id], name: "user_story_unique")

  // next buat flexibilats begitu pun buat like, tambahkan onDelete: Cascade
  
  // story Stories @relation(fields: [story_id], references: [id], onDelete: Cascade)

}
